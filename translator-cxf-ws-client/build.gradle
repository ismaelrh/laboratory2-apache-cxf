buildscript {
    ext {
        springBootVersion = '1.2.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
        classpath 'com.sahlbach.gradle:gradle-jetty-eclipse-plugin:1.9.2'

    }
}

plugins {
    id "de.undercouch.download" version "2.0.0"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'translator-client-ws-cxf'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

import de.undercouch.gradle.tasks.download.Download

//Downloads WSDL file
task(downloadWsdl) << {
    download {
        src "http://localhost:8080/api/translator?wsdl"
        dest "build/wsdl/TranslatorService.wsdl"
    }

}

project.ext {
    wsdlDir = file("build/wsdl")
    generatedWsdlDir = file("build/generated-sources/cxf")
    wsdlToGenerate = ['-d', generatedWsdlDir, '-fe', 'jaxws21', "$wsdlDir/TranslatorService.wsdl"]
    cxfVersion = '3.1.3'
    httpClientVersion = "4.5.1"
    cxfArtifacts = [
            'cxf-rt-frontend-jaxws',
            'cxf-rt-frontend-jaxrs',
            'cxf-rt-transports-http',
            'cxf-rt-rs-client',
            'cxf-rt-rs-service-description'
    ]
}

configurations {
    cxfTool
}

ext {
    cxfToolArtifacts = [
            'cxf-tools-wsdlto-frontend-jaxws',
            'cxf-tools-wsdlto-databinding-jaxb',
            'cxf-tools-common',
            'cxf-tools-wsdlto-core'
    ]
}



dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile 'org.apache.cxf.services.ws-discovery:cxf-services-ws-discovery-api:3.1.3'
    compile 'org.apache.cxf.services.ws-discovery:cxf-services-ws-discovery-service:3.1.3'
    compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.3'
    compile 'org.apache.cxf:cxf-rt-transports-http:3.1.3'
    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"


    cxfToolArtifacts.each { artifact ->
        cxfTool "org.apache.cxf:$artifact:$cxfVersion"
    }
}

eclipse {
	project {
    	name = "translator-cxf-ws-client"
	}
}



//Generates client code from WSDL
task wsdl2Java {
    if (!wsdlDir.listFiles()) {
        // nothing to do
        tasks.downloadWsdl.execute()
    }
    inputs.files wsdlDir.listFiles()
    outputs.files generatedWsdlDir
    doLast {
        javaexec {
            classpath configurations.cxfTool
            main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
            args = wsdlToGenerate
            args.add(0, '-xjc-mark-generated')
            args.add(0, '-client')
            systemProperties = ['exitOnFinish' : 'TRUE']
        }
    }


}

//compileJava.dependsOn wsdl2Java
sourceSets {
    main {
        java {
            srcDir 'build/generated-sources/cxf'
        }
    }
}



compileJava.dependsOn wsdl2Java
eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

task client(type: JavaExec) {
    group 			= 'Translator CXF Client'
    description 	= 'Run a client that connectos to a SOAP endpoint'
    main 			= 'translator.ws.Client'
    classpath 		= sourceSets.main.runtimeClasspath
}
